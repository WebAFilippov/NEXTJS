generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id Int @id @default(autoincrement())

  fullName         String
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  verified         DateTime?
  verificationCode VerificationCode?

  basket Basket?
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  category Category[]

  name        String
  slug        String  @unique
  description String?

  defaultIngredients DefaultIngredient[]
  variants           ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DefaultIngredient {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int

  name    String
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int

  price       Int
  size        String?
  type        String?
  imageUrl    String
  detailInfo  DetailInfoProduct?
  ingredients Ingredient[]

  basketProduct BasketProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DetailInfoProduct {
  id Int @id @default(autoincrement())

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productVariantId Int            @unique

  energy       Float?
  protein      Float?
  fats         Float?
  carbohydrate Float?
  weight       Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  productVariant ProductVariant[]
  basketProducts BasketProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Basket {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int?  @unique

  products BasketProduct[]

  token       String
  totalAmount Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BasketProduct {
  id Int @id @default(autoincrement())

  quantity Int

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productVariantId Int

  basket   Basket @relation(fields: [basketId], references: [id])
  basketId Int

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int?

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?

  products Json

  fullName String
  email    String
  phone    String
  address  String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  code String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
